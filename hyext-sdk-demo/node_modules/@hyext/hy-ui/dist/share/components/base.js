function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * 基础组件
 */
import React from "react";
import { processImageComSrc, mergeStyle } from "../common/utils";
import { View, Text, Image, ImageBackground, ScrollView, ActivityIndicator, Platform, Dimensions, Animated, Easing } from "react-native";

function defineProxy(obj, key, getter) {
  Object.defineProperty(obj, key, {
    get: function get() {
      return getter();
    }
  });
}

function injectGlobalData() {
  // @ts-ignore
  var device = global.__device = {};
  defineProxy(device, 'height', function () {
    return Dimensions.get('window').height;
  });
  defineProxy(device, 'width', function () {
    return Dimensions.get('window').width;
  }); // @ts-ignore

  global.__os = Platform.OS;
}

injectGlobalData(); // View

export var View_ = View; // Text

export var Text_ = Text; // Image

export function Image_(props) {
  var src = props.src,
      mode = props.mode,
      style = props.style,
      rest = _objectWithoutPropertiesLoose(props, ["src", "mode", "style"]);

  var imgStyle = mergeStyle(style, {
    height: 100,
    width: 100
  });
  var source = processImageComSrc(src);
  var resizeMode = mode;
  return React.createElement(Image, _extends({
    style: imgStyle,
    resizeMode: resizeMode,
    source: source
  }, rest));
}
Image_.prefetch = Image.prefetch.bind(Image); // Background Image

export function BackgroundImage(props) {
  var src = props.src,
      rest = _objectWithoutPropertiesLoose(props, ["src"]);

  var source = processImageComSrc(src);
  return React.createElement(ImageBackground, _extends({
    source: source
  }, rest));
}
export var ScrollView_ = ScrollView; // ScrollView

export var Indicator = ActivityIndicator; // Indicator

export var Animated_ = Animated;
export var Easing_ = Easing;