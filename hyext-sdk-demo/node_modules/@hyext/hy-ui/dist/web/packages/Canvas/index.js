function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';

function proxy(ins, c) {
  if (c === null) return;
  Object.defineProperty(ins, 'height', {
    get: function get() {
      return c.height;
    },
    set: function set(v) {
      c.height = v;
      c.style.height = v + 'px';
    }
  });
  Object.defineProperty(ins, 'width', {
    get: function get() {
      return c.width;
    },
    set: function set(v) {
      c.width = v;
      c.style.width = v + 'px';
    }
  });
}

var Canvas =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Canvas, _React$Component);

  function Canvas() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Canvas.prototype;

  _proto.getContext = function getContext() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return Promise.resolve(this._c.getContext.apply(this._c, args));
  };

  _proto.toDataURL = function toDataURL() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return Promise.resolve(this._c.toDataURL.apply(this._c, args));
  };

  _proto._init = function _init() {
    var canvas = this._c;

    if (canvas) {
      this.width = 300;
      this.height = 150;
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this._init();
  };

  _proto.render = function render() {
    var _this = this;

    return React.createElement("canvas", {
      ref: function ref(c) {
        _this._c = c;
        proxy(_this, c);
      }
    });
  };

  return Canvas;
}(React.Component);

export default Canvas;